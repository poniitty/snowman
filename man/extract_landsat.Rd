% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract_landsat.R
\name{extract_landsat}
\alias{extract_landsat}
\title{Extracts Landsat Imagery}
\usage{
extract_landsat(
  aoi,
  site_name,
  aoi_size = 2,
  start_date = "2020-01-01",
  end_date = "2024-12-01",
  months = 1:12,
  sats = "LC08",
  minclouds = 50,
  base_landsat_dir,
  workers = 1,
  data_source = "rstac",
  force = FALSE
)
}
\arguments{
\item{aoi}{An \code{sf} object or a list containing the area of interest.}

\item{site_name}{A character string representing the name of the site.}

\item{aoi_size}{A numeric value representing the size of the AOI in kilometers.}

\item{start_date}{A character string representing the start date for the imagery.}

\item{end_date}{A character string representing the end date for the imagery.}

\item{months}{A numeric vector representing the months to include (default is all months, so 1:12).}

\item{sats}{A character string representing the satellite to use (default is Landsat-8 only, so "LC08").}

\item{minclouds}{A numeric value representing the minimum cloud cover percentage (default is 50).}

\item{base_landsat_dir}{A character string representing the base directory for Landsat imagery.}

\item{workers}{A numeric value representing the number of workers for parallel processing.
Setting workers > 1 (default) enables parallel computing across multiple nodes.}

\item{data_source}{A character string representing the data source (currently only option is "rstac").}

\item{force}{Logical, if TRUE deletes all previously downloaded imagery.}
}
\value{
A tibble containing the metadata of the downloaded Landsat scenes.
}
\description{
This function extracts Landsat imagery that fulfills the specified arguments.
It processes the area of interest (AOI), transforms coordinates, and downloads
the relevant Landsat scenes.
}
\examples{
\dontrun{
# The full workflow
library(snowman)
library(terra)

# Set the number of cores
n_workers <- 4

# Replace with your own path where all data will be downloaded
base_landsat_path <- "C:/MyTemp/RS/"

site <- "Sierra_nevada" # Name of the AOI
aoi_point <- list(lon = -3.311665, lat = 37.053188) # center point of AOI

# Download Landsat-8 imagery
image_df <- extract_landsat(aoi = aoi_point,
                            site_name = site,
                            base_landsat_dir = base_landsat_path,
                            sats = "LC08",
                            workers = n_workers)

# Calculate other geospatial information for the classifier
calc_predictors(image_df, site_name = site, base_landsat_dir = base_landsat_path)

# Download pretrained Random forest classifier
download_model(model_names = "LC08",
               model_dir = base_landsat_path)

# Run the classification across imagery
lss <- classify_landsat(image_df, 
                        site_name = site, 
                        base_landsat_dir = base_landsat_path, 
                        model_dir = base_landsat_path, 
                        workers = n_workers)

# Calculate snow variables over the AOI based on the classified imagery
snow_vars <- calc_snow_variables(image_df, 
                                 site_name = site, 
                                 base_landsat_dir = base_landsat_path, 
                                 workers = n_workers)

# Plot one of the resulting layers
plot(snow_vars$scd, col = rev(topo.colors(100)), 
     main = "Snow cover duration in Sierra Nevada")

# Save the resulting snow maps as GeoTiffs
writeRaster(snow_vars, paste0(base_landsat_path, "/", site, "/", "snow_variables.tif"), 
            datatype = "FLT4S")
}
}
